{"version":3,"file":"static/js/403.de10550b.chunk.js","mappings":"qKAEA,MAkEA,EAlEmBA,KAEfC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBAEJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+fAWHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2BACJD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBAGNC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+sBAcHC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,maASDC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2gB","sources":["Components/AboutReact/ReactRedux.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst ReactRedux = () => {\r\n  return (\r\n    <div>\r\n      <h2>React Redux</h2>\r\n\r\n      <p>\r\n        Redux is a predictable state container designed to help you write\r\n        JavaScript apps that behave consistently across client, server, and\r\n        native environments and are easy to test. While it's mostly used as a\r\n        state management tool with React, you can use it with any other\r\n        JavaScript framework or library. Redux maintains the state of an entire\r\n        application in a single immutable state tree (object), which can't be\r\n        changed directly. When something changes, a new object is created (using\r\n        actions and reducers).\r\n      </p>\r\n\r\n      <h2>Key Concepts of Redux</h2>\r\n      <ul>\r\n        <li>Store</li>\r\n        <li>Actions</li>\r\n        <li>Reducers</li>\r\n        <li>Dispatch</li>\r\n        <li>Provider</li>\r\n        <li>Connect</li>\r\n      </ul>\r\n\r\n      <h2>Store</h2>\r\n      <p>\r\n        The store is the object that holds the application state and provides a\r\n        few helper methods to access the state, dispatch actions, and register\r\n        listeners. The entire state of your application is stored in an object\r\n        tree inside a single store. The only way to change the state tree is to\r\n        emit an action, an object describing what happened. To specify how the\r\n        actions transform the state tree, you write pure reducers. Reducers are\r\n        just pure functions that take the previous state and an action, and\r\n        return the next state. Actions are payloads of information that send\r\n        data from your application to your store. They are the only source of\r\n        information for the store. You send them to the store using\r\n        store.dispatch().\r\n      </p>\r\n\r\n      <h2>Actions</h2>\r\n      <p>\r\n        Actions are plain JavaScript objects that have a type field. You can\r\n        think of an action as an event that describes something that happened in\r\n        the application. The type field should be a string that gives this\r\n        action a descriptive name, like \"todos/todoAdded\". An action object can\r\n        have other fields with additional information about what happened. By\r\n        convention, we put that information in a field called payload.\r\n      </p>\r\n\r\n        <h2>Reducers</h2>\r\n        <p>\r\n          Reducers specify how the application's state changes in response to\r\n          actions sent to the store. Remember that actions only describe what\r\n          happened, but don't describe how the application's state changes.\r\n          Reducers are the pure functions that take the current state and the\r\n          action, and return the next state. They must be pure functionsâ€”functions\r\n          that return the exact same output for given inputs. They should also be\r\n          free of side-effects. This is what enables exciting features like hot\r\n          reloading and time travel.\r\n        </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReactRedux;\r\n"],"names":["ReactRedux","_jsxs","children","_jsx"],"sourceRoot":""}